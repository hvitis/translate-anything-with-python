import sys
import json
import requests
import os
import os.path

import pytesseract

from docx import Document
from docx.shared import Pt  # Point font size

from languages import *

try:
    from PIL import Image
except ImportError:
    import Image

# example token
GOOGLE_API_TOKEN = ""

def getTextFromDocxFile(filename):
    doc = Document(filename)
    fullText = []
    for para in doc.paragraphs:
        fullText.append(para.text)
    return '\n'.join(fullText)

def valid_xml_char_ordinal(c):
    # Cleaning strings for clean save with python-docx
    # Courtesy of StackOverflow's users
    # https://stackoverflow.com/a/8735509/5768457
    codepoint = ord(c)
    # conditions ordered by presumed frequency
    return (
        0x20 <= codepoint <= 0xD7FF
        or codepoint in (0x9, 0xA, 0xD)
        or 0xE000 <= codepoint <= 0xFFFD
        or 0x10000 <= codepoint <= 0x10FFFF
    )


def translate_with_google_api(array_of_original_pages, google_api_token, to):
    # Returns array of strings where each string is a translated text from a scanned page
    print("Translating document to {}...".format(to))
    url = "https://translation.googleapis.com/language/translate/v2"

    headers = {
        "Authorization": "Bearer {}".format(google_api_token),
        "Content-Type": "application/json",
    }
    translation = []
    for index, page_to_translate in enumerate(array_of_original_pages):
        print(f"Translating page {index}...")
        payload = json.dumps({"q": [page_to_translate], "target": to})
        response = requests.request("POST", url, headers=headers, data=payload)
        json_resp = json.loads(response.text)
        translated_page = json_resp
        translated_page = translated_page["data"]["translations"][0]["translatedText"]
        print('Translated: ', translated_page[:100] + '...')
        translation.append(translated_page)
    return translation


def ocr_from_images(dir):
    # Returns array of strings where each string is an original text from a scanned page
    files = [
        name for name in os.listdir(dir) if os.path.isfile(os.path.join(dir, name))
    ]
    files.sort()
    array_of_pages = []
    print("Scanning {} images for text...".format(str(len(files))))
    for index, PHOTO in enumerate(files):
        if PHOTO != ".DS_Store":  # for OSX Users
            # If you don't have tesseract executable in your PATH, include the following:
            # pytesseract.pytesseract.tesseract_cmd = r'<full_path_to_your_tesseract_executable>'
            # Example tesseract_cmd = r'C:\Program Files (x86)\Tesseract-OCR\tesseract'
            print(f"Scanning image {index}...")
            # Scan the photo to obtain text
            original_text = pytesseract.image_to_string(
                Image.open("{}/{}".format(dir, PHOTO))
            )
            array_of_pages.append(original_text)
    return array_of_pages


def generate_doc(title, array_of_pages):
    # Write the strings from the list into a *.docx file using pip python-docx
    print("Generating document: {}".format(title))
    document = Document()
    document.add_heading(title, 0)

    style = document.styles["Normal"]
    font = style.font
    font.name = "Arial"
    font.size = Pt(15)

    for index, page_content in enumerate(array_of_pages):
        document.add_heading("Page {}".format(index + 1), level=2)
        cleaned_string = "".join(
            c for c in page_content if valid_xml_char_ordinal(c)
        )  # Cleaning invalid characters generated by pytesseract
        
        paragraph = document.add_paragraph(cleaned_string)
        paragraph.style = style
        document.add_page_break()

    document.save("{}.docx".format(title))


def get_book_title(dir):
    files = [
        name for name in os.listdir(dir) if os.path.isfile(os.path.join(dir, name))
    ]
    book_title = files[0]
    if book_title == ".DS_Store":
        book_title = files[1]
    return book_title.split(".")[0]

def translate_images(directory, language_to_translate_to):
    original_pages = ocr_from_images(directory)
    generate_doc("{}".format(get_book_title(directory)), original_pages)

    translated_pages = translate_with_google_api(
        original_pages, GOOGLE_API_TOKEN, to=language_to_translate_to
    )
    generate_doc("{}_translated".format(get_book_title(directory)), translated_pages)

def cutLongStringIntoArray(string):
    # Returns array fo strings
    array_of_strings = []
    # Number of characters possible to translate
    char_num = 5000
    # Assess the size of the string and number of pages
    number_of_pages = len(string) // char_num + 1
    for _ in range(number_of_pages):
        beginning_of_the_text = string[:5000]
        string = string[5000:]
        rem_char = '\n' # new line that we get from docs
        array_of_strings.append(beginning_of_the_text.replace(rem_char, ""))
    return array_of_strings

def main():
    TRANSLATE_DOCX_FILE = input("Do you only want to translate the file (docx)? (y/n): ")
    LANGUAGE_TO_TRANSLATE = input(
        "Enter Language Code of the language you want to translate to: "
    )    
    if(TRANSLATE_DOCX_FILE == 'y'):
        TRANSLATED_FILE = input("Input name of the file to translate: ")
        chosen_file = os.path.join(TRANSLATED_FILE)
        if not os.path.isfile(chosen_file):
            sys.exit("No file named {}, exiting.".format(TRANSLATED_FILE))
        text_from_docx = getTextFromDocxFile(chosen_file)
        # Here we get one giant string, because API has limit 5000 chat when translating,
        # let's change the string to array of characters to reuse the same method as for photos
        pages_to_translate = cutLongStringIntoArray(text_from_docx)
        translated_pages = translate_with_google_api(
        pages_to_translate, GOOGLE_API_TOKEN, LANGUAGE_TO_TRANSLATE
        )
        generate_doc("{}_translated".format(TRANSLATED_FILE), translated_pages)
    else:
        DIR = input("Enter name of the folder with images of scanned book: ")

        chosen_path = os.path.join(DIR)

        if not os.path.isdir(chosen_path):
            sys.exit("No folder named {}, exiting.".format(DIR))
            
        print(AVAILABLE_LANGUAGES)

        if LANGUAGE_TO_TRANSLATE not in LANGUAGE_CODES:
            sys.exit("Chosen Language Code not available, exiting.")
        
        translate_images(DIR, LANGUAGE_TO_TRANSLATE)

if __name__ == "__main__":
    main()